{"ast":null,"code":"class Api {\n  constructor(data) {\n    this.host = data.host;\n    this.token = data.token;\n  }\n\n  // проверка статуса запроса\n  _getResponse(res) {\n    if (res.ok) {\n      return res.json();\n    } else {\n      return Promise.reject(`ошибка: ${res.status} - ${res.statusText}`);\n    }\n  }\n\n  // запрос данных пользователя\n  getUserInfo() {\n    return fetch(`${this.host}users/me`, {\n      headers: {\n        authorization: this.token\n      }\n    }).then(res => this._getResponse(res));\n  }\n\n  // отправка данных пользователя\n  sendUserInfo(data) {\n    return fetch(`${this.host}users/me`, {\n      method: 'PATCH',\n      headers: {\n        authorization: this.token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: data.name,\n        about: data.about\n      })\n    }).then(res => this._getResponse(res));\n  }\n\n  //запрос изображений с сервера \n  getImages() {\n    return fetch(`${this.host}cards`, {\n      headers: {\n        authorization: this.token\n      }\n    }).then(res => this._getResponse(res));\n  }\n\n  // отправка изображений на сервер \n  sendImages(data) {\n    return fetch(`${this.host}cards`, {\n      method: 'POST',\n      headers: {\n        authorization: this.token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: data.image_title,\n        link: data.link\n      })\n    }).then(res => this._getResponse(res));\n  }\n\n  //смена аватара(отправка на сервер)\n  sendAvatar(data) {\n    return fetch(`${this.host}users/me/avatar`, {\n      method: 'PATCH',\n      headers: {\n        authorization: this.token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        avatar: data.avatar\n      })\n    }).then(res => this._getResponse(res));\n  }\n\n  //удалить карточку\n  deleteCard(data) {\n    return fetch(`${this.host}cards/${data}`, {\n      method: 'DELETE',\n      headers: {\n        authorization: this.token\n      }\n    }).then(res => this._getResponse(res));\n  }\n\n  //поставить лайк \n  addLike(data) {\n    return fetch(`${this.host}cards/${data}/likes `, {\n      method: 'PUT',\n      headers: {\n        authorization: this.token\n      }\n    }).then(res => this._getResponse(res));\n  }\n\n  //удалить лайк\n  deleteLike(data) {\n    return fetch(`${this.host}cards/${data}/likes `, {\n      method: 'DELETE',\n      headers: {\n        authorization: this.token\n      }\n    }).then(res => this._getResponse(res));\n  }\n}\nconst api = new Api({\n  host: 'https://mesto.nomoreparties.co/v1/cohort-47/',\n  token: 'aa25b93c-b1f5-4136-8d21-3d760fe1b048'\n});\nexport default api;","map":{"version":3,"names":["Api","constructor","data","host","token","_getResponse","res","ok","json","Promise","reject","status","statusText","getUserInfo","fetch","headers","authorization","then","sendUserInfo","method","body","JSON","stringify","name","about","getImages","sendImages","image_title","link","sendAvatar","avatar","deleteCard","addLike","deleteLike","api"],"sources":["C:/Users/vyach/dev/react-mesto-auth/src/utils/Api.js"],"sourcesContent":["class Api {\r\n    constructor(data) {\r\n        this.host = data.host;\r\n        this.token = data.token;\r\n    }\r\n\r\n    // проверка статуса запроса\r\n    _getResponse(res) {\r\n        if (res.ok) {\r\n            return res.json();\r\n        } else {\r\n            return Promise.reject(\r\n                `ошибка: ${res.status} - ${res.statusText}`\r\n            );\r\n        }\r\n    }\r\n\r\n    // запрос данных пользователя\r\n    getUserInfo() {\r\n        return fetch(`${this.host}users/me`, {\r\n            headers: {\r\n                authorization: this.token,\r\n            },\r\n        }).then((res) => this._getResponse(res))\r\n    }\r\n\r\n    // отправка данных пользователя\r\n    sendUserInfo(data) {\r\n        return fetch(`${this.host}users/me`, {\r\n            method: 'PATCH',\r\n            headers: {\r\n                authorization: this.token,\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ name: data.name, about: data.about }),\r\n        }).then((res) => this._getResponse(res));\r\n    }\r\n\r\n    //запрос изображений с сервера \r\n    getImages() {\r\n        return fetch(`${this.host}cards`, {\r\n            headers: {\r\n                authorization: this.token,\r\n            },\r\n        }).then((res) => this._getResponse(res));\r\n    }\r\n\r\n    // отправка изображений на сервер \r\n    sendImages(data) {\r\n        return fetch(`${this.host}cards`, {\r\n            method: 'POST',\r\n            headers: {\r\n                authorization: this.token,\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ name: data.image_title, link: data.link }),\r\n        }).then((res) => this._getResponse(res));\r\n    }\r\n\r\n    //смена аватара(отправка на сервер)\r\n    sendAvatar(data) {\r\n        return fetch(`${this.host}users/me/avatar`, {\r\n            method: 'PATCH',\r\n            headers: {\r\n                authorization: this.token,\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ avatar: data.avatar }),\r\n        }).then((res) => this._getResponse(res));\r\n    }\r\n\r\n    //удалить карточку\r\n    deleteCard(data) {\r\n        return fetch(`${this.host}cards/${data}`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                authorization: this.token,\r\n            }\r\n        }).then((res) => this._getResponse(res));\r\n    }\r\n\r\n    //поставить лайк \r\n    addLike(data) {\r\n        return fetch(`${this.host}cards/${data}/likes `, {\r\n            method: 'PUT',\r\n            headers: {\r\n                authorization: this.token,\r\n            }\r\n        }).then((res) => this._getResponse(res));\r\n    }\r\n\r\n    //удалить лайк\r\n    deleteLike(data) {\r\n        return fetch(`${this.host}cards/${data}/likes `, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                authorization: this.token,\r\n            }\r\n        }).then((res) => this._getResponse(res));\r\n    }\r\n}\r\n\r\nconst api = new Api({\r\n    host: 'https://mesto.nomoreparties.co/v1/cohort-47/',\r\n    token: 'aa25b93c-b1f5-4136-8d21-3d760fe1b048'\r\n});\r\n\r\nexport default api;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"class Auth {\n  constructor(data) {\n    this.host = data.host;\n  } // проверка статуса запроса\n\n\n  _getResponse(res) {\n    if (res.ok) {\n      return res.json();\n    } else {\n      return Promise.reject(`ошибка: ${res.status} - ${res.statusText}`);\n    }\n  } //пробросить данные для регистрации через АПИ\n\n\n  register(data) {\n    return fetch(`${this.host}/signup`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        password: data.password,\n        email: data.email\n      })\n    }).then(res => this._getResponse(res));\n  }\n\n  //пробросить данные из инпутов и отправить на сервер для авторизации пользователя\n  login(dataUser) {\n    return fetch(`${this.host}/signin`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        password: dataUser.password,\n        email: dataUser.email\n      })\n    }).then(res => this._getResponse(res));\n  }\n\n  //запрос на сервер для авторизации\n  getToken(tkn) {\n    return fetch(`${this.host}/users/me`, {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${tkn}`\n      }\n    }).then(res => this._getResponse(res));\n  }\n\n}\n\nconst auth = new Auth({\n  host: 'https://auth.nomoreparties.co'\n});\nexport default auth;","map":{"version":3,"names":["Auth","constructor","data","host","_getResponse","res","ok","json","Promise","reject","status","statusText","register","fetch","method","headers","body","JSON","stringify","password","email","then","login","dataUser","getToken","tkn","auth"],"sources":["C:/Users/vyach/dev/react-mesto-auth/src/utils/Auth.js"],"sourcesContent":["class Auth {\r\n    constructor(data) {\r\n        this.host = data.host;\r\n    }\r\n\r\n    // проверка статуса запроса\r\n    _getResponse(res) {\r\n        if (res.ok) {\r\n            return res.json();\r\n        } else {\r\n            return Promise.reject(\r\n                `ошибка: ${res.status} - ${res.statusText}`\r\n            );\r\n        }\r\n    }\r\n\r\n    //пробросить данные для регистрации через АПИ\r\n    register(data) {\r\n        return fetch(`${this.host}/signup`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                password: data.password,\r\n                email: data.email,\r\n            })\r\n        }).then((res) => this._getResponse(res))\r\n    };\r\n\r\n    //пробросить данные из инпутов и отправить на сервер для авторизации пользователя\r\n    login(dataUser) {\r\n        return fetch(`${this.host}/signin`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                password: dataUser.password,\r\n                email: dataUser.email,\r\n            })\r\n        }).then((res) => this._getResponse(res))\r\n    };\r\n\r\n    //запрос на сервер для авторизации\r\n    getToken(tkn) {\r\n        return fetch(`${this.host}/users/me`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${tkn}`,\r\n            }\r\n        }).then((res) => this._getResponse(res))\r\n    }\r\n\r\n}\r\n\r\nconst auth = new Auth({\r\n    host: 'https://auth.nomoreparties.co',\r\n});\r\n\r\nexport default auth;"],"mappings":"AAAA,MAAMA,IAAN,CAAW;EACPC,WAAW,CAACC,IAAD,EAAO;IACd,KAAKC,IAAL,GAAYD,IAAI,CAACC,IAAjB;EACH,CAHM,CAKP;;;EACAC,YAAY,CAACC,GAAD,EAAM;IACd,IAAIA,GAAG,CAACC,EAAR,EAAY;MACR,OAAOD,GAAG,CAACE,IAAJ,EAAP;IACH,CAFD,MAEO;MACH,OAAOC,OAAO,CAACC,MAAR,CACF,WAAUJ,GAAG,CAACK,MAAO,MAAKL,GAAG,CAACM,UAAW,EADvC,CAAP;IAGH;EACJ,CAdM,CAgBP;;;EACAC,QAAQ,CAACV,IAAD,EAAO;IACX,OAAOW,KAAK,CAAE,GAAE,KAAKV,IAAK,SAAd,EAAwB;MAChCW,MAAM,EAAE,MADwB;MAEhCC,OAAO,EAAE;QACL,gBAAgB;MADX,CAFuB;MAKhCC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;QACjBC,QAAQ,EAAEjB,IAAI,CAACiB,QADE;QAEjBC,KAAK,EAAElB,IAAI,CAACkB;MAFK,CAAf;IAL0B,CAAxB,CAAL,CASJC,IATI,CASEhB,GAAD,IAAS,KAAKD,YAAL,CAAkBC,GAAlB,CATV,CAAP;EAUH;;EAED;EACAiB,KAAK,CAACC,QAAD,EAAW;IACZ,OAAOV,KAAK,CAAE,GAAE,KAAKV,IAAK,SAAd,EAAwB;MAChCW,MAAM,EAAE,MADwB;MAEhCC,OAAO,EAAE;QACL,gBAAgB;MADX,CAFuB;MAKhCC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;QACjBC,QAAQ,EAAEI,QAAQ,CAACJ,QADF;QAEjBC,KAAK,EAAEG,QAAQ,CAACH;MAFC,CAAf;IAL0B,CAAxB,CAAL,CASJC,IATI,CASEhB,GAAD,IAAS,KAAKD,YAAL,CAAkBC,GAAlB,CATV,CAAP;EAUH;;EAED;EACAmB,QAAQ,CAACC,GAAD,EAAM;IACV,OAAOZ,KAAK,CAAE,GAAE,KAAKV,IAAK,WAAd,EAA0B;MAClCW,MAAM,EAAE,KAD0B;MAElCC,OAAO,EAAE;QACL,UAAU,kBADL;QAEL,gBAAgB,kBAFX;QAGL,iBAAkB,UAASU,GAAI;MAH1B;IAFyB,CAA1B,CAAL,CAOJJ,IAPI,CAOEhB,GAAD,IAAS,KAAKD,YAAL,CAAkBC,GAAlB,CAPV,CAAP;EAQH;;AAtDM;;AA0DX,MAAMqB,IAAI,GAAG,IAAI1B,IAAJ,CAAS;EAClBG,IAAI,EAAE;AADY,CAAT,CAAb;AAIA,eAAeuB,IAAf"},"metadata":{},"sourceType":"module"}
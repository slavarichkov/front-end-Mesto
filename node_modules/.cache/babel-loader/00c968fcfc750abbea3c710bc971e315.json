{"ast":null,"code":"class Auth {\n  constructor(data) {\n    this.host = data.host;\n  } //пробросить данные для регистрации через АПИ\n\n\n  handleRegister(data) {\n    return fetch(`${this.host}/signup`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        password: data.password,\n        email: data.email\n      })\n    }).then(response => response.json()); // .then((data) => {\n    //     setIsRegisterPopupOpened(true); // при положительном ответе открыть попап подверждения регистрации\n    //     setTimeout(() => { // закрыть подверждение через 3 сек.\n    //         setIsRegisterPopupOpened(false);\n    //         setRegisterIn(false);\n    //     }, 3000);\n    //     setRegisterIn(true);\n    // })\n    // .catch((err) => {\n    //     console.log(err); console.log(1212\n    //     )\n    // });\n  }\n\n  //пробросить данные из инпутов и отправить на сервер для авторизации пользователя\n  handleLogin(dataUser) {\n    return fetch(`${this.host}/signin`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        password: dataUser.password,\n        email: dataUser.email\n      })\n    }).then(response => {\n      return response.json();\n    }); // .then((data) => {\n    //     if (data.message === 'Incorrect email address or password') {\n    //         setIsAuthUserUnsuccessfull(true);\n    //     } else {\n    //         localStorage.setItem('token', data.token);\n    //         localStorage.setItem(\"email\", dataUser.email);\n    //         getAuth(data.token);\n    //     }\n    // })\n    // .catch((err) => {\n    //     console.log('неверные данные авторизации')\n    //     console.log(err);\n    // });\n  }\n\n  //запрос на сервер для авторизации\n  getAuth(tkn) {\n    return fetch(`${this.host}/users/me`, {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${tkn}`\n      }\n    }).then(res => res.json()); // .then(() => {\n    //     setLoggedIn(true);\n    // })\n    // .catch(err => {\n    //     console.log(err);\n    //     setIsAuthUserUnsuccessfull(false);\n    // });\n  }\n\n}\n\nconst auth = new Auth({\n  host: 'https://auth.nomoreparties.co'\n});\nexport default auth;","map":{"version":3,"names":["Auth","constructor","data","host","handleRegister","fetch","method","headers","body","JSON","stringify","password","email","then","response","json","handleLogin","dataUser","getAuth","tkn","res","auth"],"sources":["C:/Users/vyach/dev/react-mesto-auth/src/utils/Auth.js"],"sourcesContent":["class Auth {\r\n    constructor(data) {\r\n        this.host = data.host;\r\n    }\r\n\r\n    //пробросить данные для регистрации через АПИ\r\n    handleRegister(data) {\r\n        return fetch(`${this.host}/signup`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                password: data.password,\r\n                email: data.email,\r\n            })\r\n        }).then((response) => response.json())\r\n        // .then((data) => {\r\n        //     setIsRegisterPopupOpened(true); // при положительном ответе открыть попап подверждения регистрации\r\n        //     setTimeout(() => { // закрыть подверждение через 3 сек.\r\n        //         setIsRegisterPopupOpened(false);\r\n        //         setRegisterIn(false);\r\n        //     }, 3000);\r\n        //     setRegisterIn(true);\r\n        // })\r\n        // .catch((err) => {\r\n        //     console.log(err); console.log(1212\r\n        //     )\r\n        // });\r\n    };\r\n\r\n    //пробросить данные из инпутов и отправить на сервер для авторизации пользователя\r\n    handleLogin(dataUser) {\r\n        return fetch(`${this.host}/signin`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                password: dataUser.password,\r\n                email: dataUser.email,\r\n            })\r\n        }).then((response) => { return response.json() })\r\n        // .then((data) => {\r\n        //     if (data.message === 'Incorrect email address or password') {\r\n        //         setIsAuthUserUnsuccessfull(true);\r\n        //     } else {\r\n        //         localStorage.setItem('token', data.token);\r\n        //         localStorage.setItem(\"email\", dataUser.email);\r\n        //         getAuth(data.token);\r\n        //     }\r\n        // })\r\n        // .catch((err) => {\r\n        //     console.log('неверные данные авторизации')\r\n        //     console.log(err);\r\n        // });\r\n    };\r\n\r\n    //запрос на сервер для авторизации\r\n    getAuth(tkn) {\r\n        return fetch(`${this.host}/users/me`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${tkn}`,\r\n            }\r\n        }).then(res => res.json())\r\n        // .then(() => {\r\n        //     setLoggedIn(true);\r\n        // })\r\n        // .catch(err => {\r\n        //     console.log(err);\r\n        //     setIsAuthUserUnsuccessfull(false);\r\n        // });\r\n    }\r\n\r\n}\r\n\r\nconst auth = new Auth({\r\n    host: 'https://auth.nomoreparties.co',\r\n});\r\n\r\nexport default auth;"],"mappings":"AAAA,MAAMA,IAAN,CAAW;EACPC,WAAW,CAACC,IAAD,EAAO;IACd,KAAKC,IAAL,GAAYD,IAAI,CAACC,IAAjB;EACH,CAHM,CAKP;;;EACAC,cAAc,CAACF,IAAD,EAAO;IACjB,OAAOG,KAAK,CAAE,GAAE,KAAKF,IAAK,SAAd,EAAwB;MAChCG,MAAM,EAAE,MADwB;MAEhCC,OAAO,EAAE;QACL,gBAAgB;MADX,CAFuB;MAKhCC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;QACjBC,QAAQ,EAAET,IAAI,CAACS,QADE;QAEjBC,KAAK,EAAEV,IAAI,CAACU;MAFK,CAAf;IAL0B,CAAxB,CAAL,CASJC,IATI,CASEC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EATf,CAAP,CADiB,CAWjB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACH;;EAED;EACAC,WAAW,CAACC,QAAD,EAAW;IAClB,OAAOZ,KAAK,CAAE,GAAE,KAAKF,IAAK,SAAd,EAAwB;MAChCG,MAAM,EAAE,MADwB;MAEhCC,OAAO,EAAE;QACL,gBAAgB;MADX,CAFuB;MAKhCC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;QACjBC,QAAQ,EAAEM,QAAQ,CAACN,QADF;QAEjBC,KAAK,EAAEK,QAAQ,CAACL;MAFC,CAAf;IAL0B,CAAxB,CAAL,CASJC,IATI,CASEC,QAAD,IAAc;MAAE,OAAOA,QAAQ,CAACC,IAAT,EAAP;IAAwB,CATzC,CAAP,CADkB,CAWlB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACH;;EAED;EACAG,OAAO,CAACC,GAAD,EAAM;IACT,OAAOd,KAAK,CAAE,GAAE,KAAKF,IAAK,WAAd,EAA0B;MAClCG,MAAM,EAAE,KAD0B;MAElCC,OAAO,EAAE;QACL,UAAU,kBADL;QAEL,gBAAgB,kBAFX;QAGL,iBAAkB,UAASY,GAAI;MAH1B;IAFyB,CAA1B,CAAL,CAOJN,IAPI,CAOCO,GAAG,IAAIA,GAAG,CAACL,IAAJ,EAPR,CAAP,CADS,CAST;IACA;IACA;IACA;IACA;IACA;IACA;EACH;;AA3EM;;AA+EX,MAAMM,IAAI,GAAG,IAAIrB,IAAJ,CAAS;EAClBG,IAAI,EAAE;AADY,CAAT,CAAb;AAIA,eAAekB,IAAf"},"metadata":{},"sourceType":"module"}